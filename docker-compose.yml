version: '3.8'

services:
  # ==========================================
  # Aplicación Node.js
  # ==========================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: turnos-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Base de datos
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: turnos_db
      DB_USER: turnos_user
      DB_PASSWORD: ${DB_PASSWORD:-changeme}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-min-32-characters-long}
      
      # Admin
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
      
      # Tiempos de expiración
      TURNO_EXPIRATION_MINUTES: 30
      ACCESS_TOKEN_EXPIRATION_MINUTES: 15
      
      # WhatsApp API
      WHATSAPP_API_URL: ${WHATSAPP_API_URL}
      WHATSAPP_API_TOKEN: ${WHATSAPP_API_TOKEN}
      
      # Otros
      NODE_ENV: production
      PORT: 3000
      CORS_ORIGIN: "*"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - turnos-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      start_period: 40s
      retries: 3

  # ==========================================
  # Base de Datos PostgreSQL
  # ==========================================
  postgres:
    image: postgres:15-alpine
    container_name: turnos-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: turnos_db
      POSTGRES_USER: turnos_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - turnos-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U turnos_user -d turnos_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================
  # Adminer (Opcional - Gestor DB Web)
  # ==========================================
  adminer:
    image: adminer:latest
    container_name: turnos-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    networks:
      - turnos-network
    depends_on:
      - postgres
    profiles:
      - dev  # Solo se inicia con: docker-compose --profile dev up

networks:
  turnos-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
