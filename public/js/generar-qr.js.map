{
  "version": 3,
  "sources": ["../../src/frontend/generar-qr.ts"],
  "sourcesContent": ["import type { ApiResponse } from './types';\r\n\r\n// ==========================================\r\n// Interfaces\r\n// ==========================================\r\ninterface TokenAccesoResponse {\r\n  success: boolean;\r\n  url: string;\r\n  token?: string;\r\n  expiresAt?: string;\r\n}\r\n\r\n// Declaraci\u00F3n para la librer\u00EDa QRious (cargada v\u00EDa CDN)\r\ndeclare const QRious: any;\r\n\r\n// ==========================================\r\n// Variables Globales\r\n// ==========================================\r\nlet currentURL = '';\r\n\r\n// ==========================================\r\n// Elementos del DOM\r\n// ==========================================\r\nconst qrContainer = document.getElementById('qr-container') as HTMLDivElement;\r\nconst qrCanvas = document.getElementById('qr-canvas') as HTMLCanvasElement;\r\nconst urlDisplay = document.getElementById('url-display') as HTMLDivElement;\r\n\r\n// ==========================================\r\n// Funciones Principales\r\n// ==========================================\r\n\r\n/**\r\n * Genera un nuevo token de acceso y crea el c\u00F3digo QR\r\n */\r\nasync function generarQR(): Promise<void> {\r\n  try {\r\n    const response = await fetch('/api/token/generar-acceso');\r\n    const data: ApiResponse<TokenAccesoResponse> = await response.json();\r\n\r\n    if (!data.success || !data.data) {\r\n      alert('Error generando token de acceso');\r\n      return;\r\n    }\r\n\r\n    // Construir URL completa\r\n    const baseURL = window.location.origin;\r\n    currentURL = `${baseURL}${data.data.url}`;\r\n\r\n    // Mostrar URL\r\n    if (urlDisplay) {\r\n      urlDisplay.textContent = currentURL;\r\n    }\r\n\r\n    // Generar QR usando QRious\r\n    if (qrCanvas && typeof QRious !== 'undefined') {\r\n      const qr = new QRious({\r\n        element: qrCanvas,\r\n        value: currentURL,\r\n        size: 300,\r\n        level: 'H',\r\n        background: 'white',\r\n        foreground: '#2d3748'\r\n      });\r\n\r\n      console.log('\u2705 QR generado:', currentURL);\r\n    } else {\r\n      console.error('\u274C Canvas o QRious no disponible');\r\n    }\r\n\r\n    // Mostrar contenedor\r\n    if (qrContainer) {\r\n      qrContainer.classList.add('show');\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error generando QR:', error);\r\n    alert('Error generando QR. Verifica que el servidor est\u00E9 corriendo.');\r\n  }\r\n}\r\n\r\n/**\r\n * Descarga el c\u00F3digo QR como imagen PNG\r\n */\r\nfunction descargarQR(): void {\r\n  if (!qrCanvas) {\r\n    console.error('Canvas no encontrado');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const link = document.createElement('a');\r\n    link.download = `qr-turno-${Date.now()}.png`;\r\n    link.href = qrCanvas.toDataURL('image/png');\r\n    link.click();\r\n    console.log('\uD83D\uDCBE QR descargado');\r\n  } catch (error) {\r\n    console.error('Error descargando QR:', error);\r\n    alert('\u274C Error al descargar el QR');\r\n  }\r\n}\r\n\r\n/**\r\n * Copia la URL del turno al portapapeles\r\n */\r\nasync function copiarURL(): Promise<void> {\r\n  if (!currentURL) {\r\n    alert('\u274C No hay URL para copiar');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    await navigator.clipboard.writeText(currentURL);\r\n    alert('\u2705 URL copiada al portapapeles');\r\n    console.log('\uD83D\uDCCB URL copiada:', currentURL);\r\n  } catch (error) {\r\n    console.error('Error copiando URL:', error);\r\n    alert('\u274C Error copiando URL');\r\n  }\r\n}\r\n\r\n// ==========================================\r\n// Exportar funciones al scope global\r\n// ==========================================\r\n// Necesario porque los onclick en HTML las llaman directamente\r\n(window as any).generarQR = generarQR;\r\n(window as any).descargarQR = descargarQR;\r\n(window as any).copiarURL = copiarURL;\r\n\r\n// ==========================================\r\n// Inicializaci\u00F3n\r\n// ==========================================\r\n\r\n/**\r\n * Genera QR autom\u00E1ticamente al cargar la p\u00E1gina\r\n */\r\nwindow.addEventListener('load', () => {\r\n  console.log('\uD83D\uDD10 Generador de QR inicializado');\r\n  generarQR();\r\n});\r\n\r\n// Verificar que QRious est\u00E9 disponible\r\nif (typeof QRious === 'undefined') {\r\n  console.error('\u274C QRious no est\u00E1 cargado. Verifica el CDN.');\r\n}\r\n"],
  "mappings": ";;AAkBA,MAAI,aAAa;AAKjB,QAAM,cAAc,SAAS,eAAe,cAAc;AAC1D,QAAM,WAAW,SAAS,eAAe,WAAW;AACpD,QAAM,aAAa,SAAS,eAAe,aAAa;AASxD,iBAAe,YAA2B;AACxC,QAAI;AACF,YAAM,WAAW,MAAM,MAAM,2BAA2B;AACxD,YAAM,OAAyC,MAAM,SAAS,KAAK;AAEnE,UAAI,CAAC,KAAK,WAAW,CAAC,KAAK,MAAM;AAC/B,cAAM,iCAAiC;AACvC;AAAA,MACF;AAGA,YAAM,UAAU,OAAO,SAAS;AAChC,mBAAa,GAAG,OAAO,GAAG,KAAK,KAAK,GAAG;AAGvC,UAAI,YAAY;AACd,mBAAW,cAAc;AAAA,MAC3B;AAGA,UAAI,YAAY,OAAO,WAAW,aAAa;AAC7C,cAAM,KAAK,IAAI,OAAO;AAAA,UACpB,SAAS;AAAA,UACT,OAAO;AAAA,UACP,MAAM;AAAA,UACN,OAAO;AAAA,UACP,YAAY;AAAA,UACZ,YAAY;AAAA,QACd,CAAC;AAED,gBAAQ,IAAI,uBAAkB,UAAU;AAAA,MAC1C,OAAO;AACL,gBAAQ,MAAM,sCAAiC;AAAA,MACjD;AAGA,UAAI,aAAa;AACf,oBAAY,UAAU,IAAI,MAAM;AAAA,MAClC;AAAA,IAEF,SAAS,OAAO;AACd,cAAQ,MAAM,uBAAuB,KAAK;AAC1C,YAAM,iEAA8D;AAAA,IACtE;AAAA,EACF;AAKA,WAAS,cAAoB;AAC3B,QAAI,CAAC,UAAU;AACb,cAAQ,MAAM,sBAAsB;AACpC;AAAA,IACF;AAEA,QAAI;AACF,YAAM,OAAO,SAAS,cAAc,GAAG;AACvC,WAAK,WAAW,YAAY,KAAK,IAAI,CAAC;AACtC,WAAK,OAAO,SAAS,UAAU,WAAW;AAC1C,WAAK,MAAM;AACX,cAAQ,IAAI,yBAAkB;AAAA,IAChC,SAAS,OAAO;AACd,cAAQ,MAAM,yBAAyB,KAAK;AAC5C,YAAM,iCAA4B;AAAA,IACpC;AAAA,EACF;AAKA,iBAAe,YAA2B;AACxC,QAAI,CAAC,YAAY;AACf,YAAM,+BAA0B;AAChC;AAAA,IACF;AAEA,QAAI;AACF,YAAM,UAAU,UAAU,UAAU,UAAU;AAC9C,YAAM,oCAA+B;AACrC,cAAQ,IAAI,0BAAmB,UAAU;AAAA,IAC3C,SAAS,OAAO;AACd,cAAQ,MAAM,uBAAuB,KAAK;AAC1C,YAAM,2BAAsB;AAAA,IAC9B;AAAA,EACF;AAMA,EAAC,OAAe,YAAY;AAC5B,EAAC,OAAe,cAAc;AAC9B,EAAC,OAAe,YAAY;AAS5B,SAAO,iBAAiB,QAAQ,MAAM;AACpC,YAAQ,IAAI,wCAAiC;AAC7C,cAAU;AAAA,EACZ,CAAC;AAGD,MAAI,OAAO,WAAW,aAAa;AACjC,YAAQ,MAAM,oDAA4C;AAAA,EAC5D;",
  "names": []
}
