{
  "version": 3,
  "sources": ["../../src/frontend/admin-login.ts"],
  "sourcesContent": ["import type { ApiResponse } from './types';\r\n\r\n// ==========================================\r\n// Interfaces\r\n// ==========================================\r\ninterface LoginCredentials {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\ninterface LoginResponse {\r\n  success: boolean;\r\n  token: string;\r\n  username: string;\r\n  message?: string;\r\n}\r\n\r\n// ==========================================\r\n// Elementos del DOM\r\n// ==========================================\r\nconst form = document.getElementById('loginForm') as HTMLFormElement;\r\nconst alert = document.getElementById('alert') as HTMLDivElement;\r\nconst loginBtn = document.getElementById('loginBtn') as HTMLButtonElement;\r\nconst btnText = document.getElementById('btnText') as HTMLSpanElement;\r\nconst usernameInput = document.getElementById('username') as HTMLInputElement;\r\nconst passwordInput = document.getElementById('password') as HTMLInputElement;\r\n\r\n// ==========================================\r\n// Funciones de UI\r\n// ==========================================\r\n\r\n/**\r\n * Muestra un mensaje de alerta al usuario\r\n */\r\nfunction mostrarAlerta(mensaje: string, tipo: 'error' | 'success'): void {\r\n  alert.textContent = mensaje;\r\n  alert.className = `alert alert-${tipo} show`;\r\n  \r\n  if (tipo === 'error') {\r\n    setTimeout(() => {\r\n      alert.classList.remove('show');\r\n    }, 5000);\r\n  }\r\n}\r\n\r\n/**\r\n * Establece el estado de carga del bot\u00F3n\r\n */\r\nfunction setLoading(loading: boolean): void {\r\n  loginBtn.disabled = loading;\r\n  \r\n  if (loading) {\r\n    btnText.innerHTML = 'Verificando...<span class=\"spinner\"></span>';\r\n  } else {\r\n    btnText.textContent = 'Iniciar Sesi\u00F3n';\r\n  }\r\n}\r\n\r\n/**\r\n * Marca los campos de entrada como error\r\n */\r\nfunction marcarCamposError(): void {\r\n  usernameInput.classList.add('error');\r\n  passwordInput.classList.add('error');\r\n  passwordInput.value = '';\r\n  passwordInput.focus();\r\n}\r\n\r\n/**\r\n * Limpia los estados de error de los campos\r\n */\r\nfunction limpiarErrores(): void {\r\n  usernameInput.classList.remove('error');\r\n  passwordInput.classList.remove('error');\r\n}\r\n\r\n// ==========================================\r\n// Funciones de Autenticaci\u00F3n\r\n// ==========================================\r\n\r\n/**\r\n * Env\u00EDa las credenciales al servidor para autenticaci\u00F3n\r\n */\r\nasync function login(credentials: LoginCredentials): Promise<LoginResponse | null> {\r\n  try {\r\n    const response = await fetch('/api/token/admin/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(credentials)\r\n    });\r\n\r\n    const data: ApiResponse<LoginResponse> = await response.json();\r\n    \r\n    if (data.success && data.data) {\r\n      return data.data;\r\n    } else if (data.success) {\r\n      // API vieja sin data wrapper\r\n      return data as unknown as LoginResponse;\r\n    }\r\n    \r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error en login:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Guarda la sesi\u00F3n del administrador en sessionStorage\r\n */\r\nfunction guardarSesion(token: string, username: string): void {\r\n  sessionStorage.setItem('admin_session_token', token);\r\n  sessionStorage.setItem('admin_username', username);\r\n  console.log('\u2705 Sesi\u00F3n guardada:', username);\r\n}\r\n\r\n/**\r\n * Redirige al panel de administraci\u00F3n\r\n */\r\nfunction redirigirAPanel(): void {\r\n  mostrarAlerta('\u2705 Acceso concedido. Redirigiendo...', 'success');\r\n  \r\n  setTimeout(() => {\r\n    window.location.href = '/generar-qr.html';\r\n  }, 1000);\r\n}\r\n\r\n// ==========================================\r\n// Manejadores de Eventos\r\n// ==========================================\r\n\r\n/**\r\n * Maneja el env\u00EDo del formulario de login\r\n */\r\nasync function manejarSubmit(e: Event): Promise<void> {\r\n  e.preventDefault();\r\n\r\n  const username = usernameInput.value.trim();\r\n  const password = passwordInput.value;\r\n\r\n  // Validaci\u00F3n b\u00E1sica\r\n  if (!username || !password) {\r\n    mostrarAlerta('Por favor completa todos los campos', 'error');\r\n    return;\r\n  }\r\n\r\n  setLoading(true);\r\n  limpiarErrores();\r\n\r\n  try {\r\n    const resultado = await login({ username, password });\r\n\r\n    if (resultado && resultado.success) {\r\n      guardarSesion(resultado.token, resultado.username);\r\n      redirigirAPanel();\r\n    } else {\r\n      const mensaje = resultado?.message || 'Usuario o contrase\u00F1a incorrectos';\r\n      mostrarAlerta(mensaje, 'error');\r\n      marcarCamposError();\r\n    }\r\n  } catch (error) {\r\n    console.error('Error en login:', error);\r\n    mostrarAlerta('Error de conexi\u00F3n. Intenta nuevamente.', 'error');\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n}\r\n\r\n// ==========================================\r\n// Inicializaci\u00F3n\r\n// ==========================================\r\n\r\n// Escuchar el evento submit del formulario\r\nform.addEventListener('submit', manejarSubmit);\r\n\r\n// Auto-focus en el campo de usuario\r\nusernameInput.focus();\r\n\r\n// Prevenir doble submit\r\nform.addEventListener('keypress', (e: KeyboardEvent) => {\r\n  if (e.key === 'Enter' && loginBtn.disabled) {\r\n    e.preventDefault();\r\n  }\r\n});\r\n\r\nconsole.log('\uD83D\uDD10 Sistema de login admin inicializado');\r\n"],
  "mappings": ";;AAoBA,QAAM,OAAO,SAAS,eAAe,WAAW;AAChD,QAAM,QAAQ,SAAS,eAAe,OAAO;AAC7C,QAAM,WAAW,SAAS,eAAe,UAAU;AACnD,QAAM,UAAU,SAAS,eAAe,SAAS;AACjD,QAAM,gBAAgB,SAAS,eAAe,UAAU;AACxD,QAAM,gBAAgB,SAAS,eAAe,UAAU;AASxD,WAAS,cAAc,SAAiB,MAAiC;AACvE,UAAM,cAAc;AACpB,UAAM,YAAY,eAAe,IAAI;AAErC,QAAI,SAAS,SAAS;AACpB,iBAAW,MAAM;AACf,cAAM,UAAU,OAAO,MAAM;AAAA,MAC/B,GAAG,GAAI;AAAA,IACT;AAAA,EACF;AAKA,WAAS,WAAW,SAAwB;AAC1C,aAAS,WAAW;AAEpB,QAAI,SAAS;AACX,cAAQ,YAAY;AAAA,IACtB,OAAO;AACL,cAAQ,cAAc;AAAA,IACxB;AAAA,EACF;AAKA,WAAS,oBAA0B;AACjC,kBAAc,UAAU,IAAI,OAAO;AACnC,kBAAc,UAAU,IAAI,OAAO;AACnC,kBAAc,QAAQ;AACtB,kBAAc,MAAM;AAAA,EACtB;AAKA,WAAS,iBAAuB;AAC9B,kBAAc,UAAU,OAAO,OAAO;AACtC,kBAAc,UAAU,OAAO,OAAO;AAAA,EACxC;AASA,iBAAe,MAAM,aAA8D;AACjF,QAAI;AACF,YAAM,WAAW,MAAM,MAAM,0BAA0B;AAAA,QACrD,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,gBAAgB;AAAA,QAClB;AAAA,QACA,MAAM,KAAK,UAAU,WAAW;AAAA,MAClC,CAAC;AAED,YAAM,OAAmC,MAAM,SAAS,KAAK;AAE7D,UAAI,KAAK,WAAW,KAAK,MAAM;AAC7B,eAAO,KAAK;AAAA,MACd,WAAW,KAAK,SAAS;AAEvB,eAAO;AAAA,MACT;AAEA,aAAO;AAAA,IACT,SAAS,OAAO;AACd,cAAQ,MAAM,mBAAmB,KAAK;AACtC,YAAM;AAAA,IACR;AAAA,EACF;AAKA,WAAS,cAAc,OAAe,UAAwB;AAC5D,mBAAe,QAAQ,uBAAuB,KAAK;AACnD,mBAAe,QAAQ,kBAAkB,QAAQ;AACjD,YAAQ,IAAI,8BAAsB,QAAQ;AAAA,EAC5C;AAKA,WAAS,kBAAwB;AAC/B,kBAAc,4CAAuC,SAAS;AAE9D,eAAW,MAAM;AACf,aAAO,SAAS,OAAO;AAAA,IACzB,GAAG,GAAI;AAAA,EACT;AASA,iBAAe,cAAc,GAAyB;AACpD,MAAE,eAAe;AAEjB,UAAM,WAAW,cAAc,MAAM,KAAK;AAC1C,UAAM,WAAW,cAAc;AAG/B,QAAI,CAAC,YAAY,CAAC,UAAU;AAC1B,oBAAc,uCAAuC,OAAO;AAC5D;AAAA,IACF;AAEA,eAAW,IAAI;AACf,mBAAe;AAEf,QAAI;AACF,YAAM,YAAY,MAAM,MAAM,EAAE,UAAU,SAAS,CAAC;AAEpD,UAAI,aAAa,UAAU,SAAS;AAClC,sBAAc,UAAU,OAAO,UAAU,QAAQ;AACjD,wBAAgB;AAAA,MAClB,OAAO;AACL,cAAM,UAAU,WAAW,WAAW;AACtC,sBAAc,SAAS,OAAO;AAC9B,0BAAkB;AAAA,MACpB;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,mBAAmB,KAAK;AACtC,oBAAc,6CAA0C,OAAO;AAAA,IACjE,UAAE;AACA,iBAAW,KAAK;AAAA,IAClB;AAAA,EACF;AAOA,OAAK,iBAAiB,UAAU,aAAa;AAG7C,gBAAc,MAAM;AAGpB,OAAK,iBAAiB,YAAY,CAAC,MAAqB;AACtD,QAAI,EAAE,QAAQ,WAAW,SAAS,UAAU;AAC1C,QAAE,eAAe;AAAA,IACnB;AAAA,EACF,CAAC;AAED,UAAQ,IAAI,+CAAwC;",
  "names": []
}
