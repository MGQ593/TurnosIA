{
  "version": 3,
  "sources": ["../../src/frontend/admin-qr-generator.ts"],
  "sourcesContent": ["import type { ApiResponse } from './types';\r\n\r\n// ==========================================\r\n// Interfaces\r\n// ==========================================\r\ninterface PublicConfig {\r\n  logoUrl?: string;\r\n  accessTokenExpirationMinutes?: number;\r\n}\r\n\r\ninterface SesionVerificationResponse {\r\n  success: boolean;\r\n  username?: string;\r\n}\r\n\r\ninterface Agencia {\r\n  id: number;\r\n  nombre: string;\r\n  codigo: string;\r\n}\r\n\r\n// Declaraci\u00F3n para la librer\u00EDa qrcode (cargada v\u00EDa CDN)\r\ndeclare const qrcode: any;\r\n\r\n// ==========================================\r\n// Variables Globales\r\n// ==========================================\r\nlet currentAccessToken: string | null = null;\r\nlet expirationMinutes = 15;\r\nlet countdownInterval: number | null = null;\r\nlet qrGeneratedCount = 0;\r\nlet sessionStartTime = Date.now();\r\nlet sessionTimeInterval: number | null = null;\r\nlet agencias: Agencia[] = [];\r\n\r\n// ==========================================\r\n// Elementos del DOM\r\n// ==========================================\r\nconst logoImg = document.getElementById('logoImg') as HTMLImageElement;\r\nconst adminUsername = document.getElementById('adminUsername') as HTMLDivElement;\r\nconst errorMessage = document.getElementById('errorMessage') as HTMLDivElement;\r\nconst qrCanvas = document.getElementById('qrCanvas') as HTMLCanvasElement;\r\nconst qrCountDisplay = document.getElementById('qrCount') as HTMLDivElement;\r\nconst sessionTimeDisplay = document.getElementById('sessionTime') as HTMLDivElement;\r\n\r\n// ==========================================\r\n// Funciones de Sesi\u00F3n\r\n// ==========================================\r\n\r\n/**\r\n * Verifica que el usuario tenga una sesi\u00F3n admin v\u00E1lida\r\n */\r\nasync function verificarSesion(): Promise<boolean> {\r\n  const sessionToken = sessionStorage.getItem('admin_session_token');\r\n  \r\n  if (!sessionToken) {\r\n    console.log('No hay token de sesi\u00F3n, redirigiendo...');\r\n    window.location.href = '/admin-login.html';\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    const response = await fetch('/api/token/admin/verificar-sesion', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ token: sessionToken })\r\n    });\r\n\r\n    const data: ApiResponse<SesionVerificationResponse> = await response.json();\r\n\r\n    if (!data.success) {\r\n      console.log('Sesi\u00F3n inv\u00E1lida o expirada');\r\n      sessionStorage.removeItem('admin_session_token');\r\n      window.location.href = '/admin-login.html';\r\n      return false;\r\n    }\r\n\r\n    // Mostrar nombre de usuario\r\n    if (data.data?.username && adminUsername) {\r\n      adminUsername.textContent = data.data.username;\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error verificando sesi\u00F3n:', error);\r\n    mostrarError('Error verificando la sesi\u00F3n. Intenta iniciar sesi\u00F3n nuevamente.');\r\n    setTimeout(() => {\r\n      window.location.href = '/admin-login.html';\r\n    }, 2000);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Carga la configuraci\u00F3n del servidor\r\n */\r\nasync function cargarConfiguracion(): Promise<void> {\r\n  try {\r\n    const response = await fetch('/api/config/public');\r\n    const config: PublicConfig = await response.json();\r\n    \r\n    if (config.logoUrl && logoImg) {\r\n      logoImg.src = config.logoUrl;\r\n    }\r\n    \r\n    if (config.accessTokenExpirationMinutes) {\r\n      expirationMinutes = config.accessTokenExpirationMinutes;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error cargando configuraci\u00F3n:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Carga la lista de agencias desde el API\r\n */\r\nasync function cargarAgencias(): Promise<void> {\r\n  try {\r\n    const response = await fetch('/api/turnos/agencias');\r\n    const data: ApiResponse<Agencia[]> = await response.json();\r\n    \r\n    if (data.success && data.data) {\r\n      agencias = data.data;\r\n      const selectAgencia = document.getElementById('selectAgencia') as HTMLSelectElement;\r\n      \r\n      if (selectAgencia) {\r\n        selectAgencia.innerHTML = '<option value=\"\">Selecciona una agencia</option>';\r\n        agencias.forEach(agencia => {\r\n          const option = document.createElement('option');\r\n          option.value = agencia.id.toString();\r\n          option.textContent = `${agencia.nombre} (${agencia.codigo})`;\r\n          selectAgencia.appendChild(option);\r\n        });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error cargando agencias:', error);\r\n    mostrarError('Error al cargar las agencias');\r\n  }\r\n}\r\n\r\n// ==========================================\r\n// Funciones de Generaci\u00F3n QR\r\n// ==========================================\r\n\r\n/**\r\n * Genera un nuevo c\u00F3digo QR con token de acceso y agencia\r\n */\r\nasync function generarNuevoQR(): Promise<void> {\r\n  try {\r\n    mostrarError(''); // Limpiar errores previos\r\n\r\n    // Obtener agencia seleccionada\r\n    const selectAgencia = document.getElementById('selectAgencia') as HTMLSelectElement;\r\n    if (!selectAgencia || !selectAgencia.value) {\r\n      mostrarError('Por favor selecciona una agencia');\r\n      return;\r\n    }\r\n\r\n    const agenciaId = parseInt(selectAgencia.value);\r\n\r\n    // Verificar que la librer\u00EDa qrcode est\u00E9 cargada\r\n    if (typeof qrcode === 'undefined') {\r\n      throw new Error('Librer\u00EDa qrcode no est\u00E1 cargada. Verifica tu conexi\u00F3n a internet.');\r\n    }\r\n\r\n    // Generar token de acceso desde el API\r\n    const response = await fetch('/api/token/generar-acceso', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ agenciaId })\r\n    });\r\n\r\n    const data: ApiResponse<{ token: string }> = await response.json();\r\n\r\n    if (!data.success || !data.data?.token) {\r\n      throw new Error(data.message || 'Error al generar el token');\r\n    }\r\n\r\n    const token = data.data.token;\r\n    currentAccessToken = token;\r\n\r\n    // Construir URL con token y agencia\r\n    const baseUrl = window.location.origin;\r\n    const qrUrl = `${baseUrl}/solicitar-turno.html?id_agencia=${agenciaId}&access=${token}`;\r\n\r\n    console.log('\uD83D\uDCF1 Generando QR para agencia', agenciaId, '- URL:', qrUrl);\r\n\r\n    // Generar QR usando qrcode-generator\r\n    const qr = qrcode(0, 'M');\r\n    qr.addData(qrUrl);\r\n    qr.make();\r\n\r\n    // Dibujar QR en canvas\r\n    if (!qrCanvas) {\r\n      throw new Error('Canvas no encontrado');\r\n    }\r\n\r\n    const cellSize = 8;\r\n    const margin = 4;\r\n    const size = qr.getModuleCount() * cellSize + margin * 2;\r\n    \r\n    qrCanvas.width = size;\r\n    qrCanvas.height = size;\r\n    \r\n    const ctx = qrCanvas.getContext('2d');\r\n    if (!ctx) {\r\n      throw new Error('No se pudo obtener el contexto 2D del canvas');\r\n    }\r\n\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.fillRect(0, 0, size, size);\r\n    \r\n    ctx.fillStyle = '#000000';\r\n    for (let row = 0; row < qr.getModuleCount(); row++) {\r\n      for (let col = 0; col < qr.getModuleCount(); col++) {\r\n        if (qr.isDark(row, col)) {\r\n          ctx.fillRect(\r\n            col * cellSize + margin,\r\n            row * cellSize + margin,\r\n            cellSize,\r\n            cellSize\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // Incrementar contador\r\n    qrGeneratedCount++;\r\n    if (qrCountDisplay) {\r\n      qrCountDisplay.textContent = qrGeneratedCount.toString();\r\n    }\r\n\r\n    console.log('\u2705 QR permanente generado exitosamente');\r\n\r\n  } catch (error) {\r\n    console.error('Error generando QR:', error);\r\n    mostrarError('Error al generar el c\u00F3digo QR. Por favor intenta nuevamente.');\r\n  }\r\n}\r\n\r\n/**\r\n * Descarga el c\u00F3digo QR como imagen PNG\r\n */\r\nfunction descargarQR(): void {\r\n  if (!currentAccessToken) {\r\n    mostrarError('Primero genera un c\u00F3digo QR');\r\n    return;\r\n  }\r\n\r\n  if (!qrCanvas) {\r\n    mostrarError('Canvas no encontrado');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const url = qrCanvas.toDataURL('image/png');\r\n    const link = document.createElement('a');\r\n    link.download = `qr-turno-chevyplan-${Date.now()}.png`;\r\n    link.href = url;\r\n    link.click();\r\n    console.log('\uD83D\uDCBE QR descargado');\r\n  } catch (error) {\r\n    console.error('Error descargando QR:', error);\r\n    mostrarError('Error al descargar el QR');\r\n  }\r\n}\r\n\r\n// ==========================================\r\n// Funciones de UI\r\n// ==========================================\r\n\r\n/**\r\n * Muestra un mensaje de error al usuario\r\n */\r\nfunction mostrarError(mensaje: string): void {\r\n  if (!errorMessage) return;\r\n\r\n  if (mensaje) {\r\n    errorMessage.textContent = mensaje;\r\n    errorMessage.style.display = 'block';\r\n  } else {\r\n    errorMessage.style.display = 'none';\r\n  }\r\n}\r\n\r\n/**\r\n * Cierra la sesi\u00F3n del administrador\r\n */\r\nfunction logout(): void {\r\n  if (confirm('\u00BFEst\u00E1s seguro de que quieres cerrar la sesi\u00F3n?')) {\r\n    sessionStorage.removeItem('admin_session_token');\r\n    sessionStorage.removeItem('admin_username');\r\n    window.location.href = '/admin-login.html';\r\n  }\r\n}\r\n\r\n/**\r\n * Actualiza el contador de tiempo de sesi\u00F3n\r\n */\r\nfunction actualizarTiempoSesion(): void {\r\n  sessionTimeInterval = window.setInterval(() => {\r\n    const elapsed = Date.now() - sessionStartTime;\r\n    const minutes = Math.floor(elapsed / 60000);\r\n    const seconds = Math.floor((elapsed % 60000) / 1000);\r\n    const display = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n    \r\n    if (sessionTimeDisplay) {\r\n      sessionTimeDisplay.textContent = display;\r\n    }\r\n  }, 1000);\r\n}\r\n\r\n// ==========================================\r\n// Exportar funciones al scope global\r\n// ==========================================\r\n// Necesario porque los onclick en HTML las llaman directamente\r\n(window as any).generarNuevoQR = generarNuevoQR;\r\n(window as any).descargarQR = descargarQR;\r\n(window as any).logout = logout;\r\n\r\n// ==========================================\r\n// Inicializaci\u00F3n\r\n// ==========================================\r\n\r\n/**\r\n * Inicializa el panel de administraci\u00F3n\r\n */\r\nasync function inicializar(): Promise<void> {\r\n  try {\r\n    // Verificar sesi\u00F3n primero\r\n    const sesionValida = await verificarSesion();\r\n    if (!sesionValida) return;\r\n\r\n    // Cargar configuraci\u00F3n\r\n    await cargarConfiguracion();\r\n\r\n    // Cargar agencias\r\n    await cargarAgencias();\r\n\r\n    // Mostrar bot\u00F3n de generar QR (ahora que tenemos las agencias cargadas)\r\n    const btnGenerar = document.querySelector('.btn-primary') as HTMLButtonElement;\r\n    if (btnGenerar) {\r\n      btnGenerar.style.display = 'flex';\r\n    }\r\n\r\n    // Configurar event listeners de los botones\r\n    const btnGenerarQR = document.getElementById('btnGenerarQR');\r\n    const btnDescargarQR = document.getElementById('btnDescargarQR');\r\n    const btnLogout = document.getElementById('btnLogout');\r\n\r\n    if (btnGenerarQR) {\r\n      btnGenerarQR.addEventListener('click', () => generarNuevoQR());\r\n    }\r\n    if (btnDescargarQR) {\r\n      btnDescargarQR.addEventListener('click', descargarQR);\r\n    }\r\n    if (btnLogout) {\r\n      btnLogout.addEventListener('click', logout);\r\n    }\r\n\r\n    console.log('\u2705 Event listeners configurados correctamente');\r\n\r\n    // Iniciar contador de tiempo de sesi\u00F3n\r\n    actualizarTiempoSesion();\r\n\r\n    console.log('\uD83D\uDD12 Panel de admin inicializado correctamente');\r\n  } catch (error) {\r\n    console.error('Error en inicializaci\u00F3n:', error);\r\n    mostrarError('Error al inicializar el panel. Por favor recarga la p\u00E1gina.');\r\n  }\r\n}\r\n\r\n// Ejecutar cuando el DOM est\u00E9 listo\r\nwindow.addEventListener('DOMContentLoaded', inicializar);\r\n\r\n// Limpiar intervalos al salir\r\nwindow.addEventListener('beforeunload', () => {\r\n  if (countdownInterval) clearInterval(countdownInterval);\r\n  if (sessionTimeInterval) clearInterval(sessionTimeInterval);\r\n});\r\n\r\n// Verificar que la librer\u00EDa qrcode est\u00E9 disponible\r\nif (typeof qrcode === 'undefined') {\r\n  console.error('\u274C qrcode no est\u00E1 cargado. Verifica el CDN.');\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
